{% extends 'base.html.twig' %}

{% block title %}Tableau de bord - Statistiques{% endblock %}

{% block stylesheets %}
    {{ parent() }}
    <script type="text/javascript" src="https://www.gstatic.com/charts/loader.js"></script>
    <link href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/5.15.4/css/all.min.css" rel="stylesheet">
    <style>
        :root {
            --primary-color: #4285f4;
            --success-color: #34a853;
            --warning-color: #fbbc05;
            --danger-color: #ea4335;
            --text-color: #5f6368;
            --heading-color: #202124;
        }

        .stats-container {
            padding: 30px;
            background: #fff;
            border-radius: 12px;
            box-shadow: 0 2px 4px rgba(0,0,0,0.1);
        }

        .stats-header {
            margin-bottom: 40px;
            position: relative;
        }

        .stats-title {
            color: var(--heading-color);
            font-size: 2.5rem;
            font-weight: 600;
            margin-bottom: 15px;
        }

        .stats-description {
            color: var(--text-color);
            font-size: 1.1rem;
            margin-bottom: 30px;
        }

        .stats-summary {
            display: grid;
            grid-template-columns: repeat(auto-fit, minmax(200px, 1fr));
            gap: 20px;
            margin-bottom: 40px;
        }

        .summary-card {
            background: #fff;
            border-radius: 8px;
            padding: 20px;
            box-shadow: 0 2px 8px rgba(0,0,0,0.1);
            text-align: center;
            transition: transform 0.3s ease;
        }

        .summary-card:hover {
            transform: translateY(-5px);
        }

        .summary-icon {
            font-size: 2rem;
            margin-bottom: 15px;
        }

        .summary-number {
            font-size: 1.8rem;
            font-weight: bold;
            margin-bottom: 5px;
            background: linear-gradient(45deg, var(--primary-color), var(--success-color));
            -webkit-background-clip: text;
            -webkit-text-fill-color: transparent;
        }

        .summary-label {
            color: var(--text-color);
            font-size: 0.9rem;
        }

        .chart-grid {
            display: grid;
            grid-template-columns: repeat(auto-fit, minmax(500px, 1fr));
            gap: 25px;
            margin-top: 20px;
        }

        .chart-card {
            background: #fff;
            border-radius: 12px;
            box-shadow: 0 4px 12px rgba(0,0,0,0.1);
            padding: 20px;
            transition: all 0.3s ease;
            position: relative;
            overflow: hidden;
        }

        .chart-card::before {
            content: '';
            position: absolute;
            top: 0;
            left: 0;
            width: 100%;
            height: 4px;
            background: linear-gradient(90deg, var(--primary-color), var(--success-color));
        }

        .chart-card:hover {
            transform: translateY(-5px);
            box-shadow: 0 6px 16px rgba(0,0,0,0.15);
        }

        .chart-title {
            color: var(--heading-color);
            font-size: 1.2rem;
            font-weight: 600;
            margin-bottom: 20px;
            padding-bottom: 15px;
            border-bottom: 1px solid #e0e0e0;
            display: flex;
            align-items: center;
        }

        .chart-title i {
            margin-right: 10px;
            color: var(--primary-color);
        }

        .chart-container {
            min-height: 400px;
            position: relative;
        }

        .loading {
            position: absolute;
            top: 50%;
            left: 50%;
            transform: translate(-50%, -50%);
            display: flex;
            flex-direction: column;
            align-items: center;
            gap: 15px;
        }

        .loading-spinner {
            width: 40px;
            height: 40px;
            border: 4px solid #f3f3f3;
            border-top: 4px solid var(--primary-color);
            border-radius: 50%;
            animation: spin 1s linear infinite;
        }

        .error-message {
            background: #fce8e6;
            color: var(--danger-color);
            padding: 15px 20px;
            border-radius: 8px;
            display: flex;
            align-items: center;
            gap: 10px;
        }

        .error-message i {
            font-size: 1.2rem;
        }

        @keyframes spin {
            0% { transform: rotate(0deg); }
            100% { transform: rotate(360deg); }
        }

        @media (max-width: 768px) {
            .chart-grid {
                grid-template-columns: 1fr;
            }
            
            .stats-summary {
                grid-template-columns: repeat(2, 1fr);
            }
        }
    </style>
{% endblock %}

{% block body %}
    <div class="stats-container">
        <div class="stats-header">
            <h1 class="stats-title">Tableau de bord des statistiques</h1>
            <p class="stats-description">Vue d'ensemble détaillée des locations et services</p>
            <a href="{{ path('app_statistiques_pdf') }}" class="btn btn-primary" style="display: inline-flex; align-items: center; gap: 8px; padding: 10px 20px; background: var(--primary-color); color: white; border-radius: 6px; text-decoration: none; transition: background 0.3s ease;">
                <i class="fas fa-file-pdf"></i>
                Générer PDF
            </a>
        </div>

        <div class="stats-summary">
            <div class="summary-card" style="border-top: 4px solid var(--primary-color)">
                <i class="fas fa-chart-line summary-icon" style="color: var(--primary-color)"></i>
                <div class="summary-number" id="total-locations">0</div>
                <div class="summary-label">Total des locations</div>
            </div>
            <div class="summary-card" style="border-top: 4px solid var(--success-color)">
                <i class="fas fa-users summary-icon" style="color: var(--success-color)"></i>
                <div class="summary-number" id="total-partenaires">0</div>
                <div class="summary-label">Partenaires actifs</div>
            </div>
            <div class="summary-card" style="border-top: 4px solid var(--warning-color)">
                <i class="fas fa-car summary-icon" style="color: var(--warning-color)"></i>
                <div class="summary-number" id="total-marques">0</div>
                <div class="summary-label">Marques disponibles</div>
            </div>
            <div class="summary-card" style="border-top: 4px solid var(--danger-color)">
                <i class="fas fa-concierge-bell summary-icon" style="color: var(--danger-color)"></i>
                <div class="summary-number" id="total-services">0</div>
                <div class="summary-label">Services proposés</div>
            </div>
        </div>

        <div class="chart-grid">
            <div class="chart-card">
                <h3 class="chart-title">
                    <i class="fas fa-chart-pie"></i>
                    Nombre de locations par partenaire
                </h3>
                <div class="chart-container">
                    <div id="locationsParPartenaire">
                        <div class="loading">
                            <div class="loading-spinner"></div>
                            <span>Chargement des données...</span>
                        </div>
                    </div>
                </div>
            </div>

            <div class="chart-card">
                <h3 class="chart-title">
                    <i class="fas fa-chart-bar"></i>
                    Répartition des services par partenaire
                </h3>
                <div class="chart-container">
                    <div id="servicesParPartenaire">
                        <div class="loading">
                            <div class="loading-spinner"></div>
                            <span>Chargement des données...</span>
                        </div>
                    </div>
                </div>
            </div>

            <div class="chart-card">
                <h3 class="chart-title">
                    <i class="fas fa-trophy"></i>
                    Top 10 des marques les plus demandées
                </h3>
                <div class="chart-container">
                    <div id="marquesPlusDemandees">
                        <div class="loading">
                            <div class="loading-spinner"></div>
                            <span>Chargement des données...</span>
                        </div>
                    </div>
                </div>
            </div>

            <div class="chart-card">
                <h3 class="chart-title">
                    <i class="fas fa-chart-pie"></i>
                    Répartition globale des services
                </h3>
                <div class="chart-container">
                    <div id="repartitionServices">
                        <div class="loading">
                            <div class="loading-spinner"></div>
                            <span>Chargement des données...</span>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>

    <script type="text/javascript">
        google.charts.load('current', {'packages':['corechart']});
        google.charts.setOnLoadCallback(initDashboard);

        const chartOptions = {
            backgroundColor: 'transparent',
            chartArea: {width: '85%', height: '75%'},
            colors: ['#4285f4', '#34a853', '#fbbc05', '#ea4335', '#5f6368', '#185abc', '#137333', '#b31412'],
            legend: {
                position: 'bottom',
                textStyle: {
                    color: '#5f6368',
                    fontSize: 12
                }
            },
            animation: {
                startup: true,
                duration: 1000,
                easing: 'out'
            },
            tooltip: {
                showColorCode: true,
                textStyle: {
                    color: '#212121',
                    fontSize: 13
                }
            }
        };

        function showError(containerId, message) {
            const container = document.getElementById(containerId);
            container.innerHTML = `
                <div class="error-message">
                    <i class="fas fa-exclamation-circle"></i>
                    ${message}
                </div>
            `;
        }

        function animateNumber(element, end, duration = 2000) {
            const start = parseInt(element.textContent);
            const range = end - start;
            const minStep = 1;
            let current = start;
            const stepTime = Math.abs(Math.floor(duration / range));
            const timer = setInterval(() => {
                current += 1;
                element.textContent = current;
                if (current >= end) {
                    element.textContent = end;
                    clearInterval(timer);
                }
            }, stepTime);
        }

        function updateSummaryCards(data) {
            console.log('Summary data:', data);
            const totalLocations = document.getElementById('total-locations');
            const totalPartenaires = document.getElementById('total-partenaires');
            const totalMarques = document.getElementById('total-marques');
            const totalServices = document.getElementById('total-services');

            animateNumber(totalLocations, data.totalLocations);
            animateNumber(totalPartenaires, data.totalPartenaires);
            animateNumber(totalMarques, data.totalMarques);
            animateNumber(totalServices, data.totalServices);
        }

        function initDashboard() {
            console.log('Initializing dashboard...');
            // Charger les données pour les cartes récapitulatives
            Promise.all([
                fetch('/api/statistiques/locations-par-partenaire').then(r => r.json()),
                fetch('/api/statistiques/services-par-partenaire').then(r => r.json()),
                fetch('/api/statistiques/marques-plus-demandees').then(r => r.json()),
                fetch('/api/statistiques/repartition-services').then(r => r.json())
            ]).then(([locationsData, servicesData, marquesData, repartitionData]) => {
                console.log('Locations data:', locationsData);
                console.log('Services data:', servicesData);
                console.log('Marques data:', marquesData);
                console.log('Repartition data:', repartitionData);

                // Calculer les totaux pour les cartes récapitulatives
                const summaryData = {
                    totalLocations: locationsData.data.reduce((sum, item) => sum + parseInt(item.nombre_locations), 0),
                    totalPartenaires: locationsData.data.length,
                    totalMarques: marquesData.data.length,
                    totalServices: repartitionData.data.length
                };
                updateSummaryCards(summaryData);

                // Dessiner les graphiques
                drawLocationsChart(locationsData);
                drawServicesChart(servicesData);
                drawMarquesChart(marquesData);
                drawRepartitionChart(repartitionData);
            }).catch(error => {
                console.error('Erreur lors du chargement des données:', error);
                showError('locationsParPartenaire', 'Erreur lors du chargement des données: ' + error.message);
            });
        }

        function drawLocationsChart(data) {
            console.log('Drawing locations chart with data:', data);
            if (data.error) {
                showError('locationsParPartenaire', 'Erreur lors du chargement des données');
                return;
            }
            if (!data.data || data.data.length === 0) {
                showError('locationsParPartenaire', 'Aucune donnée disponible');
                return;
            }

            const chartData = [['Partenaire', 'Nombre de locations']];
            data.data.forEach(item => {
                chartData.push([item.partenaire || 'Non défini', parseInt(item.nombre_locations) || 0]);
            });
            
            const chart = new google.visualization.PieChart(document.getElementById('locationsParPartenaire'));
            chart.draw(google.visualization.arrayToDataTable(chartData), {
                ...chartOptions,
                pieHole: 0.4,
                pieSliceText: 'percentage',
                slices: {
                    4: {offset: 0.2},
                    5: {offset: 0.1}
                }
            });
        }

        function drawServicesChart(data) {
            console.log('Drawing services chart with data:', data);
            if (data.error || !data.data || data.data.length === 0) {
                showError('servicesParPartenaire', data.error || 'Aucune donnée disponible');
                return;
            }

            const chartData = [['Partenaire', 'Nombre de services']];
            data.data.forEach(item => {
                chartData.push([item.partenaire || 'Non défini', parseInt(item.nombre_services) || 0]);
            });
            
            const chart = new google.visualization.BarChart(document.getElementById('servicesParPartenaire'));
            chart.draw(google.visualization.arrayToDataTable(chartData), {
                ...chartOptions,
                hAxis: {
                    title: 'Nombre de services',
                    titleTextStyle: {color: '#5f6368'},
                    textStyle: {color: '#5f6368'}
                },
                vAxis: {
                    textStyle: {color: '#5f6368'}
                }
            });
        }

        function drawMarquesChart(data) {
            console.log('Drawing marques chart with data:', data);
            if (data.error || !data.data || data.data.length === 0) {
                showError('marquesPlusDemandees', data.error || 'Aucune donnée disponible');
                return;
            }

            const chartData = [['Marque', 'Nombre de locations']];
            data.data.forEach(item => {
                chartData.push([item.marque || 'Non défini', parseInt(item.nombre_locations) || 0]);
            });
            
            const chart = new google.visualization.ColumnChart(document.getElementById('marquesPlusDemandees'));
            chart.draw(google.visualization.arrayToDataTable(chartData), {
                ...chartOptions,
                vAxis: {
                    title: 'Nombre de locations',
                    titleTextStyle: {color: '#5f6368'},
                    textStyle: {color: '#5f6368'},
                    minValue: 0
                },
                hAxis: {
                    textStyle: {color: '#5f6368'},
                    slantedText: true,
                    slantedTextAngle: 45
                }
            });
        }

        function drawRepartitionChart(data) {
            console.log('Drawing repartition chart with data:', data);
            if (data.error || !data.data || data.data.length === 0) {
                showError('repartitionServices', data.error || 'Aucune donnée disponible');
                return;
            }

            const chartData = [['Service', 'Nombre de locations']];
            data.data.forEach(item => {
                chartData.push([item.service || 'Non défini', parseInt(item.nombre_locations) || 0]);
            });
            
            const chart = new google.visualization.PieChart(document.getElementById('repartitionServices'));
            chart.draw(google.visualization.arrayToDataTable(chartData), {
                ...chartOptions,
                pieHole: 0.4,
                pieSliceText: 'percentage'
            });
        }

        // Responsive charts
        let resizeTimer;
        window.addEventListener('resize', () => {
            clearTimeout(resizeTimer);
            resizeTimer = setTimeout(initDashboard, 250);
        });
    </script>
{% endblock %} 